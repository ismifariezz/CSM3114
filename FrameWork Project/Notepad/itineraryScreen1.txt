import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../widgets/country_mapping.dart';
import '../widgets/drawer.dart';
import '../screens/itineraryDetail_screen.dart';
import 'itineraryEdit_screen.dart';

class CreateItineraryScreen extends StatefulWidget {
  final String username;

  const CreateItineraryScreen({super.key, required this.username});
  @override
  _CreateItineraryScreenState createState() => _CreateItineraryScreenState();
}

class _CreateItineraryScreenState extends State<CreateItineraryScreen> {
  List<Map<String, dynamic>> itineraryData = []; // List to store retrieved data
  List<String> keys = [];

  @override
  void initState() {
    super.initState();
    fetchData(); // Fetch data when the screen is initialized
  }

  Future<void> fetchData() async {
    final url = Uri.https(
      'travel-planner-32bb6-default-rtdb.asia-southeast1.firebasedatabase.app',
      'Signup/${widget.username}/RegisteredPlace.json',
    );

    final response = await http.get(url);

    if (response.statusCode == 200) {
      final Map<String, dynamic>? data = json.decode(response.body);
      keys = data!.keys.toList();

      // Check if the response body is not empty or null
      if (data != null && data.isNotEmpty) {
        List<Map<String, dynamic>> dataList = [];
        data.forEach((key, value) {
          dataList.add(value);
        });

        // Update the state with the retrieved data
        setState(() {
          itineraryData = dataList;
        });
      } else {
        // Handle the case where the path is empty or data is non-existent
        print('Data is empty or non-existent');
      }
    } else {
      throw Exception('Failed to load data');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.green[100],
      appBar: AppBar(
        title: Text('Itinerary'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () {
              // Call the fetchData function to refresh the data
              fetchData();
            },
          ),
        ],
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              'MY TRIP',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: itineraryData.length,
              itemBuilder: (context, index) {
                final item = itineraryData[index];
                final countryCode = countryMapping[item['Country']];

                return GestureDetector(
                  onTap: () {
                    // Navigate to a new page when tapped
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => ItineraryDetailScreen(item),
                      ),
                    );
                  },
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: Colors.pinkAccent,
                      child: Text(
                        // Use the countryCode to get the flag emoji
                        countryCode != null
                            ? String.fromCharCodes(countryCode.codeUnits)
                            : '?', // Use a placeholder if countryCode is not found
                        style: TextStyle(
                          color: Colors.white,
                        ),
                      ),
                    ),
                    title: Text('${item['Country']}'),
                    subtitle:
                        Text('From: ${item['FromDate']} to: ${item['ToDate']}'),
                    trailing: IconButton(
                        onPressed: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => ItineraryEditScreen(
                                  item, widget.username, keys[index]),
                            ),
                          );
                        },
                        icon: Icon(Icons.edit)),
                  ),
                );
              },
            ),
          ),
        ],
      ),
      drawer: CustomDrawer(username: widget.username),
    );
  }
}
