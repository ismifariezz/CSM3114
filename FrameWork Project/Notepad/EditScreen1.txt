import 'package:flutter/material.dart';
import '../models/activity_model.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

class ItineraryEditScreen extends StatefulWidget {
  final Map<String, dynamic> itineraryData;
  final String username;
  final String tableKey;

  const ItineraryEditScreen(this.itineraryData, this.username, this.tableKey);

  @override
  _ItineraryEditScreenState createState() => _ItineraryEditScreenState();
}

class _ItineraryEditScreenState extends State<ItineraryEditScreen>
    with SingleTickerProviderStateMixin {
  String selectedTransportation = 'Rental Car';
  String selectedHome = 'Homestay'; // Default value
  List<String> selectedActivities = [];
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(
      length: 2, // Two tabs: Transportation and Activities
      vsync: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    // Get activities based on the selected country
    List<String> activities =
        ActivityModel.activities[widget.itineraryData['Country']] ?? [];

    return Scaffold(
      appBar: AppBar(
        title: Text('Edit Itinerary'),
        bottom: TabBar(
          controller: _tabController,
          tabs: [
            Tab(text: 'Transportation & Home'),
            Tab(text: 'Activities'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          // Transportation Tab
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text(
                  'Choose Transportation',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 25,
                    fontWeight: FontWeight.bold,
                    color: Colors.green,
                  ),
                ),
                // Dropdown for transportation
                DropdownButton<String>(
                  value: selectedTransportation,
                  icon: Icon(Icons.arrow_drop_down),
                  iconSize: 24,
                  elevation: 0,
                  isExpanded: true,
                  style: TextStyle(color: Colors.black),
                  onChanged: (String? newValue) {
                    setState(() {
                      selectedTransportation = newValue!;
                    });
                  },
                  items: <String>[
                    'Rental Car',
                    'Public Transportation',
                    'Taxi',
                    // Add more transportation options as needed
                  ].map<DropdownMenuItem<String>>((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    );
                  }).toList(),
                ),
                SizedBox(height: 16),
                // Dropdown for home choices
                Text(
                  'Choose Home',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 25,
                    fontWeight: FontWeight.bold,
                    color: Colors.green,
                  ),
                ),
                DropdownButton<String>(
                  value: selectedHome,
                  icon: Icon(Icons.arrow_drop_down),
                  iconSize: 24,
                  elevation: 0,
                  isExpanded: true,
                  style: TextStyle(color: Colors.black),
                  onChanged: (String? newValue) {
                    setState(() {
                      selectedHome = newValue!;
                    });
                  },
                  items: <String>[
                    'Homestay',
                    'Hotel',
                    'Shalet',
                    // Add more home choices as needed
                  ].map<DropdownMenuItem<String>>((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    );
                  }).toList(),
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Information Saved'),
                      ),
                    );
                  },
                  child: Text('Save'),
                ),
              ],
            ),
          ),
          // Activities Tab
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text(
                  'Choose Activities',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 25,
                    color: Colors.green,
                  ),
                ),
                SizedBox(height: 16),
                // Activities checkboxes
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: activities
                      .map(
                        (activity) => CheckboxListTile(
                          title: Text(activity),
                          value: selectedActivities.contains(activity),
                          onChanged: (bool? isChecked) {
                            setState(() {
                              if (isChecked != null) {
                                if (isChecked) {
                                  selectedActivities.add(activity);
                                } else {
                                  selectedActivities.remove(activity);
                                }
                              }
                            });
                          },
                        ),
                      )
                      .toList(),
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _itinerary();
                    });
                    Navigator.pop(context);
                  },
                  child: Text('Save'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _itinerary() async {
    final url = Uri.https(
        'travel-planner-32bb6-default-rtdb.asia-southeast1.firebasedatabase.app',
        'Signup/${widget.username}/RegisteredPlace/${widget.tableKey}.json');

    final response = await http.post(
      url,
      body: json.encode(
        {
          'Transportation': selectedTransportation,
          'Home': selectedHome,
          'Activities': selectedActivities,
        },
      ),
    );

    if (response.statusCode != 200) {
      print('Failed to save data');
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
}
